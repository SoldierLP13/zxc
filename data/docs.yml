docs:
  ModPE.dumpVtable:
    type: namespacemethod
    args: 'string, int'
    description: >
      Used to dump a vtable. Can be useful for addon development.
    example: >
      No information yet.
  ModPE.getBytesFromTexturePack:
    type: namespacemethod
    args: 'string'
    description: >
      No information yet.
    example: >
      No information yet.
  ModPE.getMinecraftVersion:
    type: namespacemethod
    args: ''
    returns: 'string'
    description: >
      Returns the current MC:PE version.
    example: >
      ```
      
      chatMessage(ModPE.getMinecraftVersion());
      
      ```
      
      Will post the current Minecraft version to the chat.
  ModPE.langEdit:
    type: namespacemethod
    args: 'string, string'
    description: >
      Changes a key-pair value in MC:PE's internal i18n database.
    example: >
      No information yet.
  ModPE.leaveGame:
    type: namespacemethod
    args: ''
    description: >
      Leaves the game.
    example: >
      No information yet.
  ModPE.log:
    type: namespacemethod
    args: 'string'
    description: >
      Logs a message into the logcat.
    example: >
      No information yet.
  ModPE.openInputStreamFromTexturePack:
    type: namespacemethod
    args: 'string'
    description: >
      No information yet.
    example: >
      No information yet.
  ModPE.overrideTexture:
    type: namespacemethod
    args: 'string, string'
    description: >
      No information yet.
    example: >
      No information yet.
  ModPE.readData:
    type: namespacemethod
    args: 'string'
    returns: string
    description: >
      Reads a value mod-specific save data by key.
    example: >
      No information yet.
  ModPE.removeData:
    type: namespacemethod
    args: 'string'
    description: >
      Removes a key-value pair from mod-specific save data.
    example: >
      No information yet.
  ModPE.resetFov:
    type: namespacemethod
    args: ''
    description: >
      Resets FOV to default?
    example: >
      No information yet.
  ModPE.resetImages:
    type: namespacemethod
    args: ''
    description: >
      Resets textures to their defaults.
    example: >
      No information yet.
  ModPE.saveData:
    type: namespacemethod
    args: 'string, string'
    description: >
      Sets a value in mod-specific save data by key.
    example: >
      No information yet.
  ModPE.selectLevel:
    type: namespacemethod
    args: 'string'
    description: >
      No information yet.
    example: >
      No information yet.
  ModPE.setCamera:
    type: namespacemethod
    args: 'entity'
    description: >
      Sets the entity the camera should target.
    example: >
      No information yet.
  ModPE.setFoodItem:
    type: namespacemethod
    args: 'int, string, int, int, string, int'
    description: >
      No information yet.
    example: >
      No information yet.
  ModPE.setFov:
    type: namespacemethod
    args: 'double'
    description: >
      Sets the FOV for the player.
    example: >
      No information yet.
  ModPE.setGameSpeed:
    type: namespacemethod
    args: 'double'
    description: >
      Sets the amount of ticks per second.
    example: >
      No information yet.
  ModPE.setGuiBlocks:
    type: namespacemethod
    args: 'string'
    description: >
      Sets the textures for GUI blocks. (The first argument should be a URL.)
    example: >
      No information yet.
  ModPE.setItem:
    type: namespacemethod
    args: 'int, string, int, string, int'
    description: >

      - `int`: The ID of the new item.

      - `string`: The texture name of the item.

      - `int`: Texture offset. Used for textures like `texture_0`, `texture_1`...

      - `string`: The name of the item.

      - `int`: Stack size.


      Adds an item into the game.
    example: >
      No information yet.
      
  ModPE.setItems:
    type: namespacemethod
    args: 'string'
    description: >
      Sets the textures for items. (The first argument should be a URL.)
    example: >
      No information yet.
  ModPE.setTerrain:
    type: namespacemethod
    args: 'string'
    description: >
      Sets the textures for the terrain. (The first argument should be a URL.)
    example: >
      No information yet.
  ModPE.showTipMessage:
    type: namespacemethod
    args: 'string'
    description: >
      Shows a tip message (like the message shown when you tap an item.)
    example: >
      No information yet.
  ModPE.takeScreenshot:
    type: namespacemethod
    args: 'string'
    description: >
      No information yet.
    example: >
      No information yet.
  Level.addParticle:
    type: namespacemethod
    args: 'int, double, double, double, double, double, double, int'
    description: >
      Spawns a particle in the world.
    example: >
      No information yet.
  Level.biomeIdToName:
    type: namespacemethod
    args: 'int'
    returns: 'string'
    description: >
      Converts a biome ID into its name.
    example: >
      No information yet.
  Level.canSeeSky:
    type: namespacemethod
    args: 'int, int, int'
    returns: 'bool'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z


      Returns whether a block can see the sky.
    example: >
      No information yet.
  Level.destroyBlock:
    type: namespacemethod
    args: 'int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      
      Destroys a block as if a player mined it.
    example: >
      No information yet.
  Level.dropItem:
    type: namespacemethod
    args: 'double, double, double, double, int, int, int'
    returns: entity
    description: >

      - `double`: X

      - `double`: Y

      - `double`: Z

      - `double`: Range? Usually just set this to `0.0`.

      - `int`: ID of the item

      - `int`: Count of the item

      - `int`: Data (damage) of the item.


      Spawns a dropped item in the world. It returns the newly
      created entity, which can be manipulated.
    example: >
      No information yet.
  Level.explode:
    type: namespacemethod
    args: 'double, double, double, double'
    description: >

      - `double`: X

      - `double`: Y

      - `double`: Z

      - `double`: Power
      
      Causes an explosion somewhere in the world.
    example: >
      No information yet.
  Level.getAddress:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Level.getBiome:
    type: namespacemethod
    args: 'int, int'
    description: >

      - `int`: X

      - `int`: Z


      Gets the ID of a biome at a specific location in the world.
    example: >
      No information yet.
  Level.getBiomeName:
    type: namespacemethod
    args: 'int, int'
    description: >

      - `int`: X

      - `int`: Z


      Gets the name of a biome at a specific location in the world.
    example: >
      No information yet.
  Level.getBrightness:
    type: namespacemethod
    args: 'int, int, int'
    returns: 'int?/double?'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      
      Returns the light level at a position in the world.
    example: >
      No information yet.
  Level.getChestSlot:
    type: namespacemethod
    args: 'int, int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      - `int`: Slot


      Returns the ID of an item in a chest.
    example: >
      No information yet.
  Level.getChestSlotCount:
    type: namespacemethod
    args: 'int, int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      - `int`: Slot


      Returns the count of an item in a chest.
    example: >
      No information yet.
  Level.getChestSlotData:
    type: namespacemethod
    args: 'int, int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      - `int`: Slot in chest


      Returns the damage of an item in a chest.
    example: >
      No information yet.
  Level.getData:
    type: namespacemethod
    args: 'int, int, int'
    description: >
      
      - `int`: X

      - `int`: Y

      - `int`: Z

      
      Returns the data of an block in the world.
    example: >
      No information yet.
  Level.getFurnaceSlot:
    type: namespacemethod
    args: 'int, int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      - `int`: Slot


      Returns the ID of an item in a furnace.
    example: >
      No information yet.
  Level.getFurnaceSlotCount:
    type: namespacemethod
    args: 'int, int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      - `int`: Slot


      Returns the count of an item in a furnace.
    example: >
      No information yet.
  Level.getFurnaceSlotData:
    type: namespacemethod
    args: 'int, int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      - `int`: Slot


      Returns the data of an item in a furnace.
    example: >
      No information yet.
  Level.getGameMode:
    type: namespacemethod
    args: ''
    returns: 'int'
    description: >
      Returns the gamemode the player is currently in.
    example: >
      No information yet.
  Level.getGrassColor:
    type: namespacemethod
    args: 'int, int'
    returns: int
    description: >

      - `int`: X

      - `int`: Z


      Returns the color of grass.
    example: >
      No information yet.
  Level.getLightningLevel:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Level.getRainLevel:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Level.getSignText:
    type: namespacemethod
    args: 'int, int, int, int'
    description: >

      - `int`: X pos

      - `int`: Y pos

      - `int`: Z pos

      - `int`: Line (0, 1, 2, or 3.)


      Returns a line of text from a sign.
    example: >
      No information yet.
  Level.getSpawnerEntityType:
    type: namespacemethod
    args: 'int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      
      Returns the entity ID of a spawner.
    example: >
      No information yet.
  Level.getTile:
    type: namespacemethod
    args: 'int, int, int'
    returns: int
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      
      Returns the ID of a block in the world.
    example: >
      No information yet.
  Level.getTime:
    type: namespacemethod
    args: ''
    returns: 'int'
    description: >
      Returns the amount of ticks passed in the world.
    example: >
      No information yet.
  Level.getWorldDir:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Level.getWorldName:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Level.playSound:
    type: namespacemethod
    args: 'double, double, double, string, double, double'
    description: >

      - `double`: X pos

      - `double`: Y pos

      - `double`: Z pos

      - `string`: Sound name, **NOT FILE**. e.g `random.click`

      - `double`: ???

      - `double`: ???


      Plays a sound somewhere in the world.
    example: >
      No information yet.
  Level.playSoundEnt:
    type: namespacemethod
    args: 'Object, string, double, double'
    description: >
      No information yet.
    example: >
      No information yet.
  Level.setChestSlot:
    type: namespacemethod
    args: 'int, int, int, int, int, int, int'
    description: >
      
      - `int`: X of the chest

      - `int`: Y of the chest

      - `int`: Z of the chest

      - `int`: Slot in the chest

      - `int`: ID of the new item

      - `int`: Damage (aux) of the new item

      - `int`: Count of the new item.


      Sets what item is in a chest, at a certain slot.
    example: >
      No information yet.
  Level.setFurnaceSlot:
    type: namespacemethod
    args: 'int, int, int, int, int, int, int'
    description: >

      - `int`: X of the furnace

      - `int`: Y of the furnace

      - `int`: Z of the furnace

      - `int`: Slot in the furnace

      - `int`: ID of the new item

      - `int`: Damage (aux) of the new item

      - `int`: Count of the new item.


      Sets what item is in a furnace, at a certain slot.
    example: >
      No information yet.
  Level.setGameMode:
    type: namespacemethod
    args: 'int'
    description: >
      Sets the gamemode the player is in.
    example: >
      No information yet.
  Level.setGrassColor:
    type: namespacemethod
    args: 'int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Color (`0xAABBCCDD` color)


      Sets the grass color of a column in the world.
    example: >
      No information yet.
  Level.setLightningLevel:
    type: namespacemethod
    args: 'double'
    description: >
      No information yet.
    example: >
      No information yet.
  Level.setNightMode:
    type: namespacemethod
    args: ''
    description: >
      Unknown.
    example: >
      No information yet.
  Level.setRainLevel:
    type: namespacemethod
    args: 'double'
    description: >
      No information yet.
    example: >
      No information yet.
  Level.setSignText:
    type: namespacemethod
    args: 'int, int, int, int, string'
    description: >

      - `int`: X pos

      - `int`: Y pos

      - `int`: Z pos

      - `int`: Line (0, 1, 2, or 3)

      - `string`: Text


      Sets a line of text in a sign.
    example: >
      No information yet.
  Level.setSpawn:
    type: namespacemethod
    args: 'int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      
      Sets the spawn position of the current world.
    example: >
      No information yet.
  Level.setSpawnerEntityType:
    type: namespacemethod
    args: 'int, int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      - `int`: Entity type ID


      Sets the entity ID of an entity that an entity spawner will spawn.
    example: >
      No information yet.
  Level.setTile:
    type: namespacemethod
    args: 'int, int, int, int, int'
    description: >

      - `int`: X

      - `int`: Y

      - `int`: Z

      - `int`: Block ID

      - `int`: Block data


      Sets the ID and damage of a block in the world.
    example: >
      No information yet.
  Level.setTime:
    type: namespacemethod
    args: 'int'
    description: >
      Sets the amount of ticks that has passed in the world.
    example: >
      No information yet.
  Level.spawnChicken:
    type: namespacemethod
    args: 'double, double, double, string'
    description: >
      No information yet.
    example: >
      No information yet.
  Level.spawnCow:
    type: namespacemethod
    args: 'double, double, double, string'
    description: >
      No information yet.
    example: >
      No information yet.
  Level.spawnMob:
    type: namespacemethod
    args: 'double, double, double, int, string'
    description: >
      Creates an entity.

      - `double`: X

      - `double`: Y

      - `double`: Z

      - `int`: Entity type ID

      - `string`: Skin (PNG file)

    example: >
      No information yet.
  Player.addExp:
    type: namespacemethod
    args: 'int'
    description: >
      Adds the amount of EXP the player has.
    example: >
      No information yet.
  Player.addItemCreativeInv:
    type: namespacemethod
    args: 'int, int, int'
    description: >
      - `int`: ID

      - `int`: Count (usually 1)

      - `int`: Data (damage)


      Adds an item into the creative inventory.
      If you want to set which creative tab (category) it belongs in, use `Item.setCategory`.
    example: >
      No information yet.
  Player.addItemInventory:
    type: namespacemethod
    args: 'int, int, int'
    description: >
      Adds an item into the player's inventory. `(id, count, damage)`
    example: >
      No information yet.
  Player.canFly:
    type: namespacemethod
    args: ''
    returns: bool
    description: >
      Returns whether the player can fly.
    example: >
      No information yet.
  Player.clearInventorySlot:
    type: namespacemethod
    args: 'int'
    description: >

      - `int`: The slot.


      Clears a slot in the player's inventory.
    example: >
      No information yet.
  Player.enchant:
    type: namespacemethod
    args: 'int, int, int'
    description: >

      - `int`: The slot ID of the item in the player's inventory.

      - `int`: The enchantment.

      - `int`: The level of the enchantment


      Enchants an item in the player's inventory.
    example: >
      No information yet.
  Player.getEnchantments:
    type: namespacemethod
    args: 'int'
    returns: 'Object[]'
    description: >

      - `int`: The slot ID of the item.


      Returns the enchantments. It is an array that has the following structure-

      ```

      var x = Player.getEnchantments(...);

      x.type // id of the enchant
      
      x.level // level of the enchant

      ```
    example: >
      No information yet.
  Player.getArmorSlot:
    type: namespacemethod
    args: 'int'
    description: >

      - `int`: The slot


      Returns the ID of an armor item.
    example: >
      No information yet.
  Player.getArmorSlotDamage:
    type: namespacemethod
    args: 'int'
    description: >

      - `int`: The slot


      Returns the damage of an armor item.
    example: >
      No information yet.
  Player.getCarriedItem:
    type: namespacemethod
    args: ''
    returns: int
    description: >
      Returns the ID of the item the player is carrying.
    example: >
      No information yet.
  Player.getCarriedItemCount:
    type: namespacemethod
    args: ''
    description: >
      Returns the count of the item the player is carrying.
    example: >
      No information yet.
  Player.getCarriedItemData:
    type: namespacemethod
    args: ''
    description: >
      Returns the damage of the item the player is carrying.
    example: >
      No information yet.
  Player.getDimension:
    type: namespacemethod
    args: ''
    returns: int
    description: >
      Returns the dimension ID the player is in.
    example: >
      No information yet.
  Player.getEntity:
    type: namespacemethod
    args: ''
    returns: entity
    description: >
      Returns the player as an entity.
    example: >
      No information yet.
  Player.getExhaustion:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Player.getExp:
    type: namespacemethod
    args: ''
    returns: double
    description: >
      Returns the amount of EXP the player has.
    example: >
      No information yet.
  Player.getHunger:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Player.getInventorySlot:
    type: namespacemethod
    args: 'int'
    returns: int
    description: >

      - `int`: The slot.


      Returns the ID of the item in the inventory slot.
    example: >
      No information yet.
  Player.getInventorySlotCount:
    type: namespacemethod
    args: 'int'
    returns: int
    description: >

      - `int`: The slot.


      Returns the count of the item in the inventory slot.
    example: >
      No information yet.
  Player.getInventorySlotData:
    type: namespacemethod
    args: 'int'
    returns: int
    description: >

      - `int`: The slot.


      Returns the damage (aux) of the item in the inventory slot.
    example: >
      No information yet.
  Player.getLevel:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Player.getName:
    type: namespacemethod
    args: 'Object'
    description: >
      No information yet.
    example: >
      No information yet.
  Player.getPointedBlockData:
    type: namespacemethod
    args: ''
    returns: int
    description: >
      Returns the data (damage) of the block you are pointing at.
    example: >
      No information yet.
  Player.getPointedBlockId:
    type: namespacemethod
    args: ''
    returns: int
    description: >
      Returns the ID of the block you are pointing at.
    example: >
      No information yet.
  Player.getPointedBlockSide:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Player.getPointedBlockX:
    type: namespacemethod
    args: ''
    returns: int
    description: >
      Returns the pointed block's X position.
    example: >
      No information yet.
  Player.getPointedBlockY:
    type: namespacemethod
    args: ''
    returns: int
    description: >
      Returns the pointed block's Y position.
    example: >
      No information yet.
  Player.getPointedBlockZ:
    type: namespacemethod
    args: ''
    retunrs: int
    description: >
      Returns the pointed block's Z position.
    example: >
      No information yet.
  Player.getPointedEntity:
    type: namespacemethod
    args: ''
    returns: entity
    description: >
      Returns the entity that is under the cursor.

      Might only work in split touch mode.
    example: >
      No information yet.
  Player.getPointedVecX:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Player.getPointedVecY:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Player.getPointedVecZ:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Player.getSaturation:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Player.getSelectedSlotId:
    type: namespacemethod
    args: ''
    returns: int
    description: >
      Returns the slot ID the player currently has selected.
    example: >
      No information yet.
  Player.getX:
    type: namespacemethod
    args: ''
    returns: double
    description: >
      Returns the X coordinate of the player.
    example: >
      No information yet.
  Player.getY:
    type: namespacemethod
    args: ''
    returns: double
    description: >
      Returns the Y coordinate of the player.
    example: >
      No information yet.
  Player.getZ:
    type: namespacemethod
    args: ''
    returns: double
    description: >
      Returns the Z coordinate of the player.
    example: >
      No information yet.
  Player.isFlying:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Player.isPlayer:
    type: namespacemethod
    args: 'entity'
    returns: bool
    description: >
      Returns whether an entity is a player.
    example: >
      No information yet.
  Player.setItemCustomName:
    type: namespacemethod
    args: 'int, string'
    description: >
      
      - `int`: The slot id of the target item.

      - `string`: The new name.


      Sets the custom name of an item.
    example: >
      No information yet.
  Player.getItemCustomName:
    type: namespacemethod
    args: 'int'
    returns: 'string'
    description: >

      - `int`: The slot id of the item.


      Returns the custom name of an item.
    example: >
      No information yet.
  Player.setArmorSlot:
    type: namespacemethod
    args: 'int, int, int'
    description: >

      - `int`: Slot number

      - `int`: ID of the piece

      - `int`: Damage (data) of the piece.


      Sets the player's armor slot.
    example: >
      No information yet.
  Player.setCanFly:
    type: namespacemethod
    args: 'boolean'
    description: >
      Sets whether the player can fly.
    example: >
      No information yet.
  Player.setExhaustion:
    type: namespacemethod
    args: 'double'
    description: >
      No information yet.
    example: >
      No information yet.
  Player.setExp:
    type: namespacemethod
    args: 'double'
    description: >
      Sets the player's EXP.
    example: >
      No information yet.
  Player.setFlying:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Player.setHealth:
    type: namespacemethod
    args: 'int'
    description: >
      Sets the player's health, in half-hearts. (1 heart = 2)
    example: >
      No information yet.
  Player.setHunger:
    type: namespacemethod
    args: 'double'
    description: >
      Sets the player's hunger level.
    example: >
      No information yet.
  Player.setLevel:
    type: namespacemethod
    args: 'int'
    description: >
      Sets the player's XP level.
    example: >
      No information yet.
  Player.setSaturation:
    type: namespacemethod
    args: 'double'
    description: >
      Sets the player's saturation level. The player's hunger will not decrease unless their saturation level is
      zero.
    example: >
      No information yet.
  Player.setSelectedSlotId:
    type: namespacemethod
    args: 'int'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.addEffect:
    type: namespacemethod
    args: 'entity, int, int, int'
    description: >

      - `entity`: Target

      - `int`: The effect. Use `MobEffect`.

      - `int`: Duration, in ticks.

      - `int`: ???


      Gives an entity a potion effect.
    example: >
      No information yet.
  Entity.getAll:
    type: namespacemethod
    args: ''
    returns: 'entity[]'
    description: >
      Returns all of the entities in an array.
    example: >
      No information yet.
  Entity.getAnimalAge:
    type: namespacemethod
    args: 'entity'
    description: >
      Returns the age of an animal.
    example: >
      No information yet.
  Entity.getArmor:
    type: namespacemethod
    args: 'entity?, int'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.getArmorDamage:
    type: namespacemethod
    args: 'entity?, int'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.getEntityTypeId:
    type: namespacemethod
    args: 'entity'
    returns: int
    description: >
      Returns the entity ID of an entity.
    example: >
      No information yet.
  Entity.getHealth:
    type: namespacemethod
    args: 'entity'
    returns: int
    description: >
      Returns the health of an entity.
    example: >
      No information yet.
  Entity.getItemEntityCount:
    type: namespacemethod
    args: 'entity'
    returns: int
    description: >
      Returns the count of the item in an item entity.
    example: >
      No information yet.
  Entity.getItemEntityData:
    type: namespacemethod
    args: 'entity'
    returns: int
    description: >
      Returns the data (damage) of the item in an item entity.
    example: >
      No information yet.
  Entity.getItemEntityId:
    type: namespacemethod
    args: 'entity'
    returns: int
    description: >
      Returns the ID of the item in an item entity.
    example: >
      ```

      clientMessage(Entity.getItemEntityId(my_item_entity));

      ```
  Entity.getMaxHealth:
    type: namespacemethod
    args: 'entity'
    returns: int
    description: >
      Returns the maximum health for an entity.
    example: >
      No information yet.
  Entity.getMobSkin:
    type: namespacemethod
    args: 'entity'
    returns: string
    description: >
      Returns the skin file of an entity.
    example: >
      No information yet.
  Entity.getNameTag:
    type: namespacemethod
    args: 'entity'
    returns: string
    description: >
      Returns the name tag of an entity.
    example: >
      No information yet.
  Entity.getPitch:
    type: namespacemethod
    args: 'entity'
    returns: double
    description: >
      Returns the pitch (rotation-wise) of this entity.
    example: >
      
      This example prints the player's yaw when they tap a block.
      
      ```

      function useItem() {
        clientMessage(Entity.getPitch(Player.getEntity()));
      }

      ```
  Entity.getRenderType:
    type: namespacemethod
    args: 'entity'
    returns: int
    description: >
      Returns the render type this entity has.
    example: >
      No information yet.
  Entity.getRider:
    type: namespacemethod
    args: 'entity'
    returns: 'entity'
    description: >
      Gets the entity that is riding this one.
    example: >
      No information yet.
  Entity.getRiding:
    type: namespacemethod
    args: 'entity'
    returns: 'entity'
    description: >
      Gets the entity that is being ridden by this one.
    example: >
      No information yet.
  Entity.getUniqueId:
    type: namespacemethod
    args: 'entity'
    returns: string
    description: >
      Returns the UUID of this entity.
    example: >
      No information yet.
  Entity.getVelX:
    type: namespacemethod
    args: 'entity'
    returns: double
    description: >
      Returns the velocity of this entity in the X coordinate.
    example: >
      No information yet.
  Entity.getVelY:
    type: namespacemethod
    args: 'entity'
    returns: double
    description: >
      Returns the velocity of this entity in the Y coordinate.
    example: >
      No information yet.
  Entity.getVelZ:
    type: namespacemethod
    args: 'entity'
    returns: double
    description: >
      Returns the velocity of this entity in the Z coordinate.
    example: >
      No information yet.
  Entity.getX:
    type: namespacemethod
    args: 'entity'
    returns: double
    description: >
      Returns the X coordinate of this entity.
    example: >
      No information yet.
  Entity.getY:
    type: namespacemethod
    args: 'entity'
    returns: double
    description: >
      Returns the Y coordinate of this entity.
    example: >
      No information yet.
  Entity.getYaw:
    type: namespacemethod
    args: 'entity'
    returns: double
    description: >
      Returns the yaw (rotation-wise) of this entity.
    example: >
      
      This example prints the player's yaw when they tap a block.

      ```

      function useItem() {
        clientMessage(Entity.getYaw(Player.getEntity()));
      }

      ```
  Entity.getZ:
    type: namespacemethod
    args: 'entity'
    returns: double
    description: >
      Returns the Z coordinate of this entity.
    example: >
      No information yet.
  Entity.isSneaking:
    type: namespacemethod
    args: 'entity'
    returns: bool
    description: >
      Returns whether this entity is sneaking.
    example: >
      No information yet.
  Entity.remove:
    type: namespacemethod
    args: 'entity'
    description: >
      Instantly removes this entity from the world.
    example: >
      No information yet.
  Entity.removeAllEffects:
    type: namespacemethod
    args: 'entity'
    description: >
      Removes all effects from an entity.
    example: >
      ```

      Entity.removeAllEffects(Player.getEntity());

      ```
  Entity.removeEffect:
    type: namespacemethod
    args: 'entity, int'
    description: >

      - `entity`: Target

      - `int`: ID of the effect. Use `MobEffect`.


      Removes a specific potion effect from an entity.
    example: >
      ```

      Entity.removeEffect(Player.getEntity(), MobEffect.nightVision);

      ```
  Entity.setExtraData:
    type: namespacemethod
    args: 'entity, key, value'
    description: >

      - `entity`: Target

      - `key`: The key. Must be in the form of `something.something.something`
      - `value`: A string.
      

      Stores extra data for this entity.
  Entity.getExtraData:
    type: namespacemethod
    args: 'entity, key'
    description: >
      
      - `entity`: Target

      - `key`: The key to get the value from.


      Returns the data stored at this entity's key.
  Entity.rideAnimal:
    type: namespacemethod
    args: 'entity, entity'
    description: >
      Makes an entity ride another.
    example: >
      No information yet.
  Entity.setAnimalAge:
    type: namespacemethod
    args: 'entity?, int'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.setArmor:
    type: namespacemethod
    args: 'entity?, int, int, int'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.setCape:
    type: namespacemethod
    args: 'entity?, string'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.setCarriedItem:
    type: namespacemethod
    args: 'entity?, int, int, int'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.setCollisionSize:
    type: namespacemethod
    args: 'entity?, double, double'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.setFireTicks:
    type: namespacemethod
    args: 'entity, int'
    description: >
      Sets how long an entity is on fire, using ticks. (20 = 1 second)
    example: >
      No information yet.
  Entity.setHealth:
    type: namespacemethod
    args: 'entity, int'
    description: >
      Sets the health of an entity.
    example: >
      No information yet.
  Entity.setMaxHealth:
    type: namespacemethod
    args: 'entity, int'
    description: >
      Sets the maximum health of an entity.
    example: >
      No information yet.
  Entity.setMobSkin:
    type: namespacemethod
    args: 'entity?, string'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.setNameTag:
    type: namespacemethod
    args: 'entity, string'
    description: >
      Sets the name tag of an entity.
    example: >
      No information yet.
  Entity.setPosition:
    type: namespacemethod
    args: 'entity, double, double, double'
    description: >

      - `entity`: Target

      - `double`: X

      - `double`: Y

      - `double`: Z


      Sets the position of an entity.
    example: >
      No information yet.
  Entity.setPositionRelative:
    type: namespacemethod
    args: 'entity?, double, double, double'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.setRenderType:
    type: namespacemethod
    args: 'entity, int'
    description: >
      Sets the render type ID of an entity.
    example: >
      No information yet.
  Entity.setRot:
    type: namespacemethod
    args: 'entity?, double, double'
    description: >
      No information yet.
    example: >
      No information yet.
  Entity.setSneaking:
    type: namespacemethod
    args: 'entity, boolean'
    description: >
      Sets whether an entity is sneaking (crouching).
    example: >
      No information yet.
  Entity.setVelX:
    type: namespacemethod
    args: 'entity, double'
    description: >
      Sets an entity's velocity in the X axis.
    example: >
      No information yet.
  Entity.setVelY:
    type: namespacemethod
    args: 'entity, double'
    description: >
      Sets an entity's velocity in the Y axis.
    example: >
      No information yet.
  Entity.setVelZ:
    type: namespacemethod
    args: 'entity, double'
    description: >
      Sets an entity's velocity in the Z axis.
    example: >
      No information yet.
  Entity.spawnMob:
    type: namespacemethod
    args: 'double, double, double, int, string'
    description: >

      - `double`: X

      - `double`: Y

      - `double`: Z

      - `int`: Entity type ID

      - `string`: Skin PNG


      Spawns an entity.
    example: >
      No information yet.
  Item.addCraftRecipe:
    type: namespacemethod
    args: 'int, int, int, Scriptable'
    description: >
      Creates an unshaped crafting recipe.

      - `int`: ID of the item you'll get from the recipe.
      
      - `int`: How much of that item.
      
      - `int`: The damage/data of that item.
      
      - `Scriptable`: Ingredients.


      ### Ingredients

      Ingredients should have a continuous 1D array like this:

      ```

      // Pattern: [id, count, damage, id, count, damage, ...]
      Item.addCraftRecipe(256, 1, 0, [1, 1, 0, 2, 1, 0]);

      ```

      The above code creates a shovel from 1 stone block and 1 grass block.
    example: >
      No information yet.
  Item.addFurnaceRecipe:
    type: namespacemethod
    args: 'int, int, int'
    description: >
      Creates a simple furnace recipe.

      - `int`: Input ID
      
      - `int`: Output ID

      - `int`: Output damage

    example: >
      No information yet.
  Item.addShapedRecipe:
    type: namespacemethod
    args: 'int, int, int, Scriptable, Scriptable'
    description: >
      Adds a shaped crafting recipe. Use this function
      if you want your recipe to be in a specific shape.

      - `int`: Result item ID

      - `int`: Result item count

      - `int`: Result item damage

      - `Scriptable`: Shape matrix

      - `Scriptable`: Letter defines.
    example: >
      This makes you receive 64 stone from a crafting
      recipe of grass blocks shaped in a diamond.

      ```

      // 1, 64 = Stack of stone.
      
      Item.addShapedRecipe(1, 64, 0, [
        " x ", // Top row.
        "x x", // Middle row.
        " x " // Bottom row.
      ], ["x", 2, 0]); // This makes "x" mean grass (2) with damage of (0).

      ```

      Here is an example of what it looks like in game:


      ![picture of crafting recipe](images/craftingrecipe.png)


      ### Another Example

      This makes you receive 64 stone from a crafting
      recipe of grass blocks shaped in a diamond, with a bedrock block in the center.

      ```

      // 1, 64 = Stack of stone.
      
      Item.addShapedRecipe(1, 64, 0, [
        " x ", // Top row.
        "xbx", // Middle row.
        " x " // Bottom row.
      ], ["x", 2, 0, "b", 7, 0]); // This makes "x" mean grass (2) with damage of (0).
      
      // Also makes "b" mean bedrock (7) with damage of (0).

      ```
  Item.defineArmor:
    type: namespacemethod
    args: 'int, string, int, string, string, int, int, int'
    description: >

      - `int`: ID of the new armor piece.

      - `string`: ???

      - `int`: ???

      - `string`: Name of the item.

      - `string`: Texture for the item?

      - `int`: ???

      - `int`: ???

      - `int`: Type. Use `ArmorType`.


      Defines a new piece of armor.
    example: >
      No information yet.
  Item.getName:
    type: namespacemethod
    args: 'int, int'
    description: >
      No information yet.
    example: >
      No information yet.
  Item.isValidItem:
    type: namespacemethod
    args: 'int'
    description: >

      - `int`: ID


      Returns whether this item is valid.
    example: >
      No information yet.
  Item.setCategory:
    type: namespacemethod
    args: 'int, int'
    description: >

      - `int`: ID of the item.

      - `int`: Category for the item. Use `ItemCategory`.


      Sets the creative tab this item should belong in.

      Note that it doesn't show unless you use `Player.addItemCreativeInv`.
    example: >
      No information yet.
  Item.setHandEquipped:
    type: namespacemethod
    args: 'int'
    description: >
      No information yet.
    example: >
      No information yet.
  Item.setMaxDamage:
    type: namespacemethod
    args: 'int, int'
    description: >

      - `int`: ID of the item

      - `int`: Maximum damage


      Sets the maximum amount of damage this item has?
    example: >
      No information yet.
  Item.setProperties:
    type: namespacemethod
    args: 'int, Object'
    description: >

      - `int`: ID of the item

      - `Object`: Properties

      
      Sets an item's properties, like in `items.json`.
    example: >
      This makes an item edible.

      ```

      var EXAMPLE_NUTRITION = 4;

      Item.setProperties(YOUR_OWN_ID_HERE, {
          "use_animation": "eat",
          "use_duration": 32,
      
          "food": {
            "nutrition": EXAMPLE_NUTRITION,
            "saturation_modifier": "low",
            "is_meat": false
          }
      });

      ```
  Block.defineLiquidBlock:
    type: namespacemethod
    args: 'int, string, Object, int'
    description: >

      - `int`: The block ID. `id + 1` will be used for the still version.

      - `string`: The name of the block.

      - `Object`: The textures of the block? Example: `[["stone", 0], ["sand", 0]]`

      - `int`: The source material. Example: `10` for Lava.


      Defines a new liquid block.
    example: >
      Example from zhuowei.

      ```

      var liquidId = 191;
      var liquidIdStill = Block.defineLiquidBlock(liquidId /* 192 will also be used for still version */,
        "Mudslide", [["stone", 0], ["sand", 0]],
        10 /* material: lava */); 

      ```
  Block.defineBlock:
    type: namespacemethod
    args: 'int, string, Object, int, bool, int'
    description: >
      Defines a new block.
      These are the parameters in order:

      - `int`: The block ID.

      - `string`: The name of the block.

      - `Object`: The name of a texture, or a texture matrix.


      **Note**: You can find texture names [here, on zhuowei's site.](http://zhuoweizhang.net/mcpetexturenames/)

      Example of a texture matrix:

      ```
      
      [["bottom texture", subID], ["top texture", subID], ["south texture", subID], ["north texture", subID], ["west texture", subID], ["east texture name", subID]]
      
      ```

      - `int`: Use a block's material for this one.

      - `opaque`: ???

      - `renderType`: Sets the render type this block will use.
    example: >
      No information yet.
  Block.getAllBlockIds:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Block.getDestroyTime:
    type: namespacemethod
    args: 'int, int'
    description: >
      No information yet.
    example: >
      No information yet.
  Block.getFriction:
    type: namespacemethod
    args: 'int, int'
    description: >
      No information yet.
    example: >
      No information yet.
  Block.getRenderType:
    type: namespacemethod
    args: 'int'
    description: >
      No information yet.
    example: >
      No information yet.
  Block.setColor:
    type: namespacemethod
    args: 'int, Scriptable'
    description: >
      No information yet.
    example: >
      No information yet.
  Block.setDestroyTime:
    type: namespacemethod
    args: 'int, double'
    description: >

      - `int`: ID

      - `double`: Time


      Sets how long to destroy a block. A shorter time means lesser time required.
    example: >
      No information yet.
  Block.setExplosionResistance:
    type: namespacemethod
    args: 'int, double'
    description: >

      - `int`: ID

      - `double`: Resistance


      Sets the explosion resistance of a single block.
    example: >
      No information yet.
  Block.setFriction:
    type: namespacemethod
    args: 'int, double'
    description: >

      - `int`: ID

      - `double`: Friction


      Sets the friction of a block.
    example: >
      No information yet.
  Block.setLightLevel:
    type: namespacemethod
    args: 'int, int'
    description: >
      Sets how much light this block will give off.
    example: >
      No information yet.
  Block.setLightOpacity:
    type: namespacemethod
    args: 'int, int'
    description: >

      - `int`: ID

      - `double`: Light opacity


      Sets the light opacity of a block.
      You can use it for letting light through.

      You may have to use `Block.setRenderLayer(YOUR_ID_HERE, 4);`, which sets
      a block's render layer to 4 (plants), in order for the light to pass through.
    example: >
      No information yet.
  Block.setRedstoneConsumer:
    type: namespacemethod
    args: 'int'
    description: >

      - `int`: ID


      Allows a block to accept redstone input.
    example: >
      No information yet.
  Block.setRenderLayer:
    type: namespacemethod
    args: 'int, int'
    description: >

      - `int`: The ID of the target block

      - `int`: The render layer.


      Sets the layer this block will render at.
    example: >
      No information yet.
  Block.setRenderType:
    type: namespacemethod
    args: 'int, int'
    description: >

      - `int`: The ID of the target block

      - `int`: The render layer.


      Sets the rendering type of this block.
    example: >
      No information yet.
  Block.setShape:
    type: namespacemethod
    args: 'int, double, double, double, double, double, double, int'
    description: >
      Sets a block's boundaries.

      - `int`: The ID.

      - `double`: X min

      - `double`: Y min

      - `double`: Z min

      - `double`: X max

      - `double`: Y max

      - `double`: Z max

      - `int`: Data (damage) value

    example: >
      No information yet.
  Server.getAddress:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Server.getAllPlayerNames:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Server.getAllPlayers:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Server.getPort:
    type: namespacemethod
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  Server.joinServer:
    type: namespacemethod
    args: 'string, int'
    description: >

      - `string`: IP

      - `int`: Port (default = `19132`)


      Joins a server.
    example: >
      No information yet.
  Server.sendChat:
    type: namespacemethod
    args: 'string'
    description: >
      Sends a message via chat.
    example: >
      No information yet.
  attackHook:
    type: hook
    args: 'attacker, victim'
    description: >
      Called when an entity hits (attacks) another entity.
    example: >
      No information yet.
  chatHook:
    type: hook
    args: 'str'
    description: >
      No information yet.
    example: >
      No information yet.
  destroyBlock:
    type: hook
    args: 'x, y, z, side'
    description: >
      Called when a block has been destroyed.
    example: >
      No information yet.
  projectileHitEntityHook:
    type: hook
    args: 'projectile, targetEntity'
    description: >
      Called when a projectile hits an entity.
    example: >
      No information yet.
  eatHook:
    type: hook
    args: 'hearts, saturationRatio'
    description: >
      Called when the player eats something.
    example: >
      No information yet.
  entityAddedHook:
    type: hook
    args: 'entity'
    description: >
      Called when an entity has been added into the world.
    example: >
      No information yet.
  entityRemovedHook:
    type: hook
    args: 'entity'
    description: >
      Called when an entity has been removed from the world.
    example: >
      No information yet.
  explodeHook:
    type: hook
    args: 'entity, x, y, z, power, onFire'
    description: >
      Called when an explosion happens.
    example: >
      No information yet.
  serverMessageReceiveHook:
    type: hook
    args: 'str'
    description: >
      No information yet.
    example: >
      No information yet.
  chatReceiveHook:
    type: hook
    args: 'str, sender'
    description: >
      No information yet.
    example: >
      No information yet.
  leaveGame:
    type: hook
    args: ''
    description: >
      Called when the game is exiting from a level.
    example: >
      No information yet.
  deathHook:
    type: hook
    args: 'attacker, victim'
    description: >
      Called when an entity dies.
    example: >
      No information yet.
  redstoneUpdateHook:
    type: hook
    args: 'x, y, z, newCurrent, worldLoading, blockId, blockData'
    description: >

      - `x`: int, X coordinate

      - `y`: int, Y coordinate

      - `z`: int, Z coordinate

      - `newCurrent`: ???, ???

      - `worldLoading`: bool, Did this take place on world load?

      - `blockId`: int, Block ID

      - `blockData`: int, Block Data


      Called when a redstone event occurs?
    example: >
      No information yet.
  selectLevelHook:
    type: hook
    args: ''
    description: >
      No information yet.
    example: >
      No information yet.
  newLevel:
    type: hook
    args: ''
    description: >
      Called when the game starts loading into a level.
    example: >
      No information yet.
  startDestroyBlock:
    type: hook
    args: 'x, y, z, side'
    description: >
      No information yet.
    example: >
      No information yet.
  projectileHitBlockHook:
    type: hook
    args: 'projectile, blockX, blockY, blockZ, side'
    description: >
      Called when a projectile hits a block.
    example: >
      No information yet.
  modTick:
    type: hook
    args: ''
    description: >
      Called every tick (usually 20 times per second). This can be used to create timers.
    example: >
      No information yet.
  useItem:
    type: hook
    args: 'x, y, z, itemid, blockid, side, itemDamage, blockDamage'
    description: >
      Called when the player taps on a block.
    example: >
      No information yet.
  ChatColor.AQUA:
    type: constant
    description: >
      Aqua (teal) colored text.
  ChatColor.BEGIN:
    type: constant
    description: >
      Unknown.
  ChatColor.BLACK:
    type: constant
    description: >
      Black colored text.
  ChatColor.BLUE:
    type: constant
    description: >
      Blue colored text.
  ChatColor.BOLD:
    type: constant
    description: >
      Bold text.
  ChatColor.DARK_AQUA:
    type: constant
    description: >
      Dark aqua (teal) colored text.
  ChatColor.DARK_BLUE:
    type: constant
    description: >
      Dark blue colored text.
  ChatColor.DARK_GRAY:
    type: constant
    description: >
      Dark gray colored text.
  ChatColor.DARK_GREEN:
    type: constant
    description: >
      Dark green colored text.
  ChatColor.DARK_PURPLE:
    type: constant
    description: >
      Dark purple colored text.
  ChatColor.DARK_RED:
    type: constant
    description: >
      Dark red colored text.
  ChatColor.GOLD:
    type: constant
    description: >
      Golden colored text.
  ChatColor.GRAY:
    type: constant
    description: >
      Gray colored text.
  ChatColor.GREEN:
    type: constant
    description: >
      Green colored text.
  ChatColor.LIGHT_PURPLE:
    type: constant
    description: >
      Light purple colored text.
  ChatColor.RED:
    type: constant
    description: >
      Red colored text.
  ChatColor.RESET:
    type: constant
    description: >
      Resets chat formatting back to normal.
  ChatColor.WHITE:
    type: constant
    description: >
      White colored text.
  ChatColor.YELLOW:
    type: constant
    description: >
      Yellow colored text.
  ItemCategory.DECORATION:
    type: constant
    description: >
      Decorations category.
  ItemCategory.FOOD:
    type: constant
    description: >
      Foodstuffs category.
  ItemCategory.INTERNAL:
    type: constant
    description: >
      No information yet.
  ItemCategory.MATERIAL:
    type: constant
    description: >
      Materials (general blocks?) actegory
  ItemCategory.TOOL:
    type: constant
    description: >
      Tools category.
  ParticleType.angryVillager:
    type: constant
    description: >
      Angry villager icons.
  ParticleType.bubble:
    type: constant
    description: >
      Bubbles!
  ParticleType.cloud:
    type: constant
    description: >
      Unknown.
  ParticleType.crit:
    type: constant
    description: >
      Particles created by a critical hit.
  ParticleType.dripLava:
    type: constant
    description: >
      Dripping lava.
  ParticleType.dripWater:
    type: constant
    description: >
      Dripping water.
  ParticleType.enchantmenttable:
    type: constant
    description: >
      Enchantment table particles.
  ParticleType.fallingDust:
    type: constant
    description: >
      Falling dust, probably created by unstable sand.
  ParticleType.flame:
    type: constant
    description: >
      Flames.
  ParticleType.happyVillager:
    type: constant
    description: >
      Happy villager icons.
  ParticleType.heart:
    type: constant
    description: >
      Hearts, usually created by animals.
  ParticleType.hugeexplosion:
    type: constant
    description: >
      A huge explosion.
  ParticleType.hugeexplosionSeed:
    type: constant
    description: >
      Unknown.
  ParticleType.ink:
    type: constant
    description: >
      No information yet.
  ParticleType.itemBreak:
    type: constant
    description: >
      Particles of an item breaking.
  ParticleType.largeexplode:
    type: constant
    description: >
      A large explosion.
  ParticleType.lava:
    type: constant
    description: >
      Particles created by lava.
  ParticleType.mobFlame:
    type: constant
    description: >
      Unknown.
  ParticleType.note:
    type: constant
    description: >
      Particles emitted by a note block.
  ParticleType.portal:
    type: constant
    description: >
      Particles emitted by portals.
  ParticleType.rainSplash:
    type: constant
    description: >
      Particles emitted by rain when it hits the ground.
  ParticleType.redstone:
    type: constant
    description: >
      Particles emitted by powered redstone.
  ParticleType.slime:
    type: constant
    description: >
      Slime particles?
  ParticleType.smoke:
    type: constant
    description: >
      Smoke.
  ParticleType.smoke2:
    type: constant
    description: >
      Unknown. Probably an alternate smoke particle.
  ParticleType.snowballpoof:
    type: constant
    description: >
      Unknown. Possibly particles created by a snowball.
  ParticleType.spell:
    type: constant
    description: >
      Unknown. Possibly enchanting table spells.
  ParticleType.spell2:
    type: constant
    description: >
      Unknown. Possibly enchanting table spells.
  ParticleType.spell3:
    type: constant
    description: >
      Unknown. Possibly enchanting table spells.
  ParticleType.splash:
    type: constant
    description: >
      Splash particles created from splashing in water.
  ParticleType.suspendedTown:
    type: constant
    description: >
      Unknown.
  ParticleType.terrain:
    type: constant
    description: >
      Unknown. Possibly particles emitted from breaking blocks.
  ParticleType.waterWake:
    type: constant
    description: >
      Unknown.
  EntityType.ARROW:
    type: constant
    description: >
      No information yet.
  EntityType.BAT:
    type: constant
    description: >
      A flying bat.
  EntityType.BLAZE:
    type: constant
    description: >
      A blaze.
  EntityType.BOAT:
    type: constant
    description: >
      A placed boat.
  EntityType.CAVE_SPIDER:
    type: constant
    description: >
      A poisonous cave spider.
  EntityType.CHICKEN:
    type: constant
    description: >
      A harmless chicken that lays eggs.
  EntityType.COW:
    type: constant
    description: >
      A cow.
  EntityType.CREEPER:
    type: constant
    description: >
      A creeper!
  EntityType.EGG:
    type: constant
    description: >
      A thrown egg.
  EntityType.ENDERMAN:
    type: constant
    description: >
      An enderman. Spooky.
  EntityType.EXPERIENCE_ORB:
    type: constant
    description: >
      An experience orb on the ground.
  EntityType.EXPERIENCE_POTION:
    type: constant
    description: >
      A thrown experience potion.
  EntityType.FALLING_BLOCK:
    type: constant
    description: >
      A falling block. (Sand, gravel...)
  EntityType.FIREBALL:
    type: constant
    description: >
      A flying fireball.
  EntityType.FISHING_HOOK:
    type: constant
    description: >
      A fishing hook produced by a fishing rod.
  EntityType.GHAST:
    type: constant
    description: >
      A ghast that lives in the nether.
  EntityType.IRON_GOLEM:
    type: constant
    description: >
      An iron golem.
  EntityType.ITEM:
    type: constant
    description: >
      A thrown item.
  EntityType.LAVA_SLIME:
    type: constant
    description: >
      A magma cube.
  EntityType.LIGHTNING_BOLT:
    type: constant
    description: >
      A lightning bolt.
  EntityType.MINECART:
    type: constant
    description: >
      A placed minecart.
  EntityType.MUSHROOM_COW:
    type: constant
    description: >
      A mooshroom cow.
  EntityType.OCELOT:
    type: constant
    description: >
      An ocelot.
  EntityType.PAINTING:
    type: constant
    description: >
      A placed painting (yes, these are entities.)
  EntityType.PIG:
    type: constant
    description: >
      A pig.
  EntityType.PIG_ZOMBIE:
    type: constant
    description: >
      A zombie pigman.
  EntityType.PLAYER:
    type: constant
    description: >
      No information yet.
  EntityType.PRIMED_TNT:
    type: constant
    description: >
      A lit TNT entity.
  EntityType.RABBIT:
    type: constant
    description: >
      A rabbit.
  EntityType.SHEEP:
    type: constant
    description: >
      A sheep.
  EntityType.SILVERFISH:
    type: constant
    description: >
      A single silverfish.
  EntityType.SKELETON:
    type: constant
    description: >
      An arrow-shooting skeleton.
  EntityType.SLIME:
    type: constant
    description: >
      A slime.
  EntityType.SMALL_FIREBALL:
    type: constant
    description: >
      No information yet.
  EntityType.SNOWBALL:
    type: constant
    description: >
      A thrown snowball.
  EntityType.SNOW_GOLEM:
    type: constant
    description: >
      A snowman!
  EntityType.SPIDER:
    type: constant
    description: >
      A spider.
  EntityType.SQUID:
    type: constant
    description: >
      A squid.
  EntityType.THROWN_POTION:
    type: constant
    description: >
      A thrown potion.
  EntityType.VILLAGER:
    type: constant
    description: >
      A(n) (annoying) villager.
  EntityType.WOLF:
    type: constant
    description: >
      A wolf.
  EntityType.ZOMBIE:
    type: constant
    description: >
      A harmful zombie.
  EntityType.ZOMBIE_VILLAGER:
    type: constant
    description: >
      Zombie-villager hybrid.
  EntityRenderType.arrow:
    type: constant
    description: >
      Arrow render type.
  EntityRenderType.bat:
    type: constant
    description: >
      Bat render type.
  EntityRenderType.blaze:
    type: constant
    description: >
      Blaze render type.
  EntityRenderType.boat:
    type: constant
    description: >
      Boat render type.
  EntityRenderType.chicken:
    type: constant
    description: >
      Chicken render type.
  EntityRenderType.cow:
    type: constant
    description: >
      Cow render type. *moo*
  EntityRenderType.creeper:
    type: constant
    description: >
      Creeper render type. *ssss*
  EntityRenderType.egg:
    type: constant
    description: >
      Egg render type.
  EntityRenderType.enderman:
    type: constant
    description: >
      Enderman render type.
  EntityRenderType.expPotion:
    type: constant
    description: >
      Experience potion render type.
  EntityRenderType.experienceOrb:
    type: constant
    description: >
      Experience orb render type.
  EntityRenderType.fallingTile:
    type: constant
    description: >
      Falling tile render type.
  EntityRenderType.fireball:
    type: constant
    description: >
      Fireball render type.
  EntityRenderType.fishHook:
    type: constant
    description: >
      Fishing rod hook render type.
  EntityRenderType.ghast:
    type: constant
    description: >
      Ghast render type.
  EntityRenderType.human:
    type: constant
    description: >
      No information yet.
  EntityRenderType.ironGolem:
    type: constant
    description: >
      Iron golem render type.
  EntityRenderType.item:
    type: constant
    description: >
      Thrown item render type.
  EntityRenderType.lavaSlime:
    type: constant
    description: >
      Magma cube render type.
  EntityRenderType.lightningBolt:
    type: constant
    description: >
      Lightning bolt render type.
  EntityRenderType.minecart:
    type: constant
    description: >
      Minecart render type.
  EntityRenderType.mushroomCow:
    type: constant
    description: >
      Mooshroom render type.
  EntityRenderType.ocelot:
    type: constant
    description: >
      Ocelot render type.
  EntityRenderType.pig:
    type: constant
    description: >
      Pig render type.
  EntityRenderType.player:
    type: constant
    description: >
      No information yet.
  EntityRenderType.player2:
    type: constant
    description: >
      No information yet.
  EntityRenderType.sheep:
    type: constant
    description: >
      Entity render type for a sheep.
  EntityRenderType.silverfish:
    type: constant
    description: >
      Entity render type for a silverfish.
  EntityRenderType.skeleton:
    type: constant
    description: >
      Entity render type for a skeleton.
  EntityRenderType.slime:
    type: constant
    description: >
      Entity render type for a slime.
  EntityRenderType.smallFireball:
    type: constant
    description: >
      No information yet.
  EntityRenderType.snowGolem:
    type: constant
    description: >
      Snow golem (snowman) render type.
  EntityRenderType.snowball:
    type: constant
    description: >
      Snowball render type.
  EntityRenderType.spider:
    type: constant
    description: >
      Spider render type.
  EntityRenderType.squid:
    type: constant
    description: >
      Squid render type.
  EntityRenderType.thrownPotion:
    type: constant
    description: >
      Thrown potion render type.
  EntityRenderType.tnt:
    type: constant
    description: >
      Ignited TNT render type.
  EntityRenderType.unknown1:
    type: constant
    description: >
      Like the name says, unknown.
  EntityRenderType.villager:
    type: constant
    description: >
      Villager render type.
  EntityRenderType.villagerZombie:
    type: constant
    description: >
      Villager/zombie hybrid render type.
  EntityRenderType.wolf:
    type: constant
    description: >
      Wolf render type.
  EntityRenderType.zombie:
    type: constant
    description: >
      Zombie render type.
  EntityRenderType.zombiePigman:
    type: constant
    description: >
      Zombie Pigman render type.
  ArmorType.boots:
    type: constant
    description: >
      Boots armor. Covers the feet.
  ArmorType.chestplate:
    type: constant
    description: >
      Chestplate armor. Covers the chestplate.
  ArmorType.helmet:
    type: constant
    description: >
      Helmet armor. Covers the head.
  ArmorType.leggings:
    type: constant
    description: >
      Leggings armor. Covers the legs.
  MobEffect.absorption:
    type: constant
    description: >
      Adds hearts that disappear once the affect ends.
  MobEffect.blindness:
    type: constant
    description: >
      Blindess. Creates black fog around the entity so they cannot see.
  MobEffect.confusion:
    type: constant
    description: >
      Confusion. Unknown.
  MobEffect.damageBoost:
    type: constant
    description: >
      Damage boost (strength). Increases the amount of damage the entity deals.
  MobEffect.damageResistance:
    type: constant
    description: >
      Resistance. Makes the entity more resistant to damage.
  MobEffect.digSlowdown:
    type: constant
    description: >
      Dig slowdown (mining fatigue). Makes the entity mine slower.
  MobEffect.digSpeed:
    type: constant
    description: >
      Dig speed (haste). Makes the entity mine faster.
  MobEffect.effectIds:
    type: constant
    description: >
      No information yet.
  MobEffect.fireResistance:
    type: constant
    description: >
      No information yet.
  MobEffect.harm:
    type: constant
    description: >
      Instant damage. Instantly damages the entity.
  MobEffect.heal:
    type: constant
    description: >
      Instant health. Instantly increases health. (Not amount of hearts.)
  MobEffect.healthBoost:
    type: constant
    description: >
      Health boost. Increases the amount of hearts the entity has.
  MobEffect.hunger:
    type: constant
    description: >
      Hungers. Makes the entity hungry.
  MobEffect.invisibility:
    type: constant
    description: >
      Invisibility. Makes the entity invisible.
  MobEffect.jump:
    type: constant
    description: >
      Jump boost. Adds jump height.
  MobEffect.movementSlowdown:
    type: constant
    description: >
      Slowness. Makes the entity move slower.
  MobEffect.movementSpeed:
    type: constant
    description: >
      Speed. Makes the entity move faster.
  MobEffect.nightVision:
    type: constant
    description: >
      Night vision. Allows the entity to see in the dark.
  MobEffect.poison:
    type: constant
    description: >
      Poison. Makes the entity lose continuously lose hearts. They are left at one heart
      if it is not cured.
  MobEffect.regeneration:
    type: constant
    description: >
      Regeneration. Makes the entity regenerate their hearts continuously.
  MobEffect.saturation:
    type: constant
    description: >
      Decreases how hungry the entity is per tick.
  MobEffect.waterBreathing:
    type: constant
    description: >
      Water breathing. Allows the entity to breathe underwater.
  MobEffect.weakness:
    type: constant
    description: >
      Weakness. Decreases the amount of attack the entity deals.
  MobEffect.wither:
    type: constant
    description: >
      Similar to poison. Turns hearts black and can kill the entity.
  DimensionId.NETHER:
    type: constant
    description: >
      The Dimension ID of the nether.
  DimensionId.NORMAL:
    type: constant
    description: >
      The Dimension ID of the overworld.
  BlockFace.DOWN:
    type: constant
    description: >
      The block side facing down.
  BlockFace.EAST:
    type: constant
    description: >
      The block side facing east.
  BlockFace.NORTH:
    type: constant
    description: >
      The block side facing north.
  BlockFace.SOUTH:
    type: constant
    description: >
      The block side facing south.
  BlockFace.UP:
    type: constant
    description: >
      The block side facing up.
  BlockFace.WEST:
    type: constant
    description: >
      The block side facing west.
  Enchantment.PROTECTION:
    type: constant
    description: >
      Protection.
  Enchantment.FIRE_PROTECTION:
    type: constant
    description: >
      Fire protection. Grants additional protection against fire.
  Enchantment.FEATHER_FALLING:
    type: constant
    description: >
      Grants additional protection against fall damage.
  Enchantment.BLAST_PROTECTION:
    type: constant
    description: >
      Grants additional protection against explosions (like TNT).
  Enchantment.PROJECTILE_PROTECTION:
    type: constant
    description: >
      Grants additional protection against projectiles.
  Enchantment.THORNS:
    type: constant
    description: >
      Makes enemies take damage when they hurt you.
  Enchantment.RESPIRATION:
    type: constant
    description: >
      Allows you to breathe underwater for a longer period of time.
  Enchantment.AQUA_AFFINITY:
    type: constant
    description: >
      Makes you break blocks underwater faster.
  Enchantment.DEPTH_STRIDER:
    type: constant
    description: >
      Makes you walk faster underwater.
  Enchantment.SHARPNESS:
    type: constant
    description: >
      Makes something sharper (does more damage.)
  Enchantment.SMITE:
    type: constant
    description: >
      Increases damage dealt to undead mobs.
      Applies to-

      - Skeletons

      - Zombies

      - Zombie Pigmen

      - Withers and Wither Skeletons when they exist.
  Enchantment.BANE_OF_ARTHROPODS:
    type: constant
    description: >
      Makes something more effective against spiders.
  Enchantment.KNOCKBACK:
    type: constant
    description: >
      Makes something knock things back further when hit.
  Enchantment.FIRE_ASPECT:
    type: constant
    description: >
      Makes something light on fire when hit.
  Enchantment.LOOTING:
    type: constant
    description: >
      Makes something drop more loot when killed with.
  Enchantment.EFFICIENCY:
    type: constant
    description: >
      Makes something mine faster.
  Enchantment.SILK_TOUCH:
    type: constant
    description: >
      Makes something return it's pure form when mined. (e.g makes mining stone drop actual stone, not cobblestone.)
  Enchantment.UNBREAKING:
    type: constant
    description: >
      Makes something more durable.
  Enchantment.FORTUNE:
    type: constant
    description: >
      Makes ores drop more stuff when mined with.
  Enchantment.POWER:
    type: constant
    description: >
      Makes bows do more damage.
  Enchantment.PUNCH:
    type: constant
    description: >
      Makes bows knock mobs/entities further.
  Enchantment.FLAME:
    type: constant
    description: >
      Makes bows light mobs/entities on fire.
  Enchantment.INFINITY:
    type: constant
    description: >
      Makes bows consume no arrows.
  Enchantment.LUCK_OF_THE_SEA:
    type: constant
    description: >
      Decreases odds of catching useless items while fishing.
  Enchantment.LURE:
    type: constant
    description: >
      Increases odds of fishes to bite your hook while fishing.
